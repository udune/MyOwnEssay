name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run tests before deployment
        run: |
          chmod +x gradlew
          ./gradlew test --no-daemon
        env:
          JWT_SECRET_KEY: test-jwt-secret-key-for-ci-pipeline-must-be-256-bits

      - name: Build Docker Image
        run: |
          docker build -t essay-backend:staging-${{ github.sha }} .
          docker tag essay-backend:staging-${{ github.sha }} essay-backend:staging-latest

      - name: Save Docker Image
        run: docker save essay-backend:staging-latest | gzip > essay-backend-staging.tar.gz

      - name: Create deployment script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "=== Starting Deployment ==="
          
          # 기존 컨테이너 정리
          docker stop essay-backend || true
          docker rm essay-backend || true
          
          # Docker 이미지 로드
          echo "Loading Docker image..."
          docker load < essay-backend-staging.tar.gz
          
          # 환경변수 검증
          if [ -z "$DB_PASSWORD" ] || [ -z "$JWT_SECRET_KEY" ]; then
            echo "ERROR: Required environment variables not set!"
            exit 1
          fi
          
          echo "Environment check passed"
          echo "DB_PASSWORD length: ${#DB_PASSWORD}"
          echo "JWT_SECRET_KEY length: ${#JWT_SECRET_KEY}"
          
          # 컨테이너 실행 (성공한 설정 그대로 사용)
          echo "Starting new container..."
          docker run -d \
            --name essay-backend \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=dev \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://34.64.150.171:5432/myownessay-db \
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD="$DB_PASSWORD" \
            -e JWT_SECRET="$JWT_SECRET_KEY" \
            -e JWT_EXPIRATION=86400000 \
            -e JWT_REFRESH_EXPIRATION=604800000 \
            --restart unless-stopped \
            essay-backend:staging-latest
          
          # 컨테이너 시작 대기
          sleep 15
          
          # 컨테이너 상태 확인
          if docker ps | grep -q essay-backend; then
            echo "✅ Container started successfully!"
            docker logs essay-backend --tail=20
          else
            echo "❌ Container failed to start!"
            docker ps -a
            docker logs essay-backend || true
            exit 1
          fi
          
          echo "=== Deployment Complete ==="
          EOF
          
          chmod +x deploy.sh

      - name: Clean staging directory
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            sudo rm -rf /tmp/essay-staging
            mkdir -p /tmp/essay-staging
            sudo chown -R $USER:$USER /tmp/essay-staging

      - name: Copy files to staging server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: 22
          source: essay-backend-staging.tar.gz,deploy.sh
          target: /tmp/essay-staging/
          overwrite: true

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /tmp/essay-staging
            
            # Docker 권한 설정
            sudo usermod -aG docker $USER || true
            sudo systemctl start docker || true
            sudo chmod 666 /var/run/docker.sock || true
            
            # 환경변수 설정
            export DB_PASSWORD="${{ secrets.STAGING_DB_PASSWORD }}"
            export JWT_SECRET_KEY="${{ secrets.STAGING_JWT_SECRET }}"
            
            # 배포 스크립트 실행
            ./deploy.sh

      - name: Health Check
        run: |
          echo "Starting health check..."
          sleep 30
          
          for i in {1..12}; do
            echo "Health check attempt $i/12"
          
            # localhost 대신 실제 호스트 IP 사용
            if curl --connect-timeout 5 --max-time 10 -f http://${{ secrets.STAGING_HOST }}:8080/api/health; then
              echo "✅ Health check passed!"
          
              # 추가 엔드포인트 테스트
              echo "Testing additional endpoints..."
              curl -s http://${{ secrets.STAGING_HOST }}:8080/ | head -2
              echo "🎉 All endpoints working!"
              exit 0
            fi
          
            if [ $i -lt 12 ]; then
              echo "Waiting 10 seconds before retry..."
              sleep 10
            fi
          done
          
          echo "❌ Health check failed after 12 attempts"
          exit 1

      - name: Debug on failure
        if: failure()
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            echo "=== DEBUGGING FAILED DEPLOYMENT ==="
            echo "Container status:"
            docker ps -a
            echo "=== Application Logs (last 50 lines) ==="
            docker logs essay-backend --tail=50 || echo "No container logs available"
            echo "=== Port Status ==="
            ss -tlnp | grep :8080 || echo "Port 8080 not listening"
            echo "=== Network connectivity ==="
            curl -v http://localhost:8080/api/health || echo "Local health check failed"

      - name: Cleanup on success
        if: success()
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /tmp/essay-staging
            rm -f essay-backend-staging.tar.gz deploy.sh
            docker system prune -f