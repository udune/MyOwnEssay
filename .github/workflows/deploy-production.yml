name: Deploy to Production

# ÌîÑÎ°úÎçïÏÖò Î∞∞Ìè¨ Ïã§Ìñâ Ï°∞Í±¥ (Îß§Ïö∞ Ïã†Ï§ë)
on:
  push: # ÏΩîÎìú Ìë∏Ïãú Ïãú
    branches: [main] # main Î∏åÎûúÏπòÎßå (ÌîÑÎ°úÎçïÏÖò Î∏åÎûúÏπò)
  workflow_dispatch: # ÏàòÎèô Ïã§Ìñâ (Í∏¥Í∏â Î∞∞Ìè¨Ïö©)

jobs:
  deploy-production:
    runs-on: ubuntu-latest # ÏµúÏã† Ubuntu ÌôòÍ≤Ω
    environment: production # GitHub Environment 'production' ÏÇ¨Ïö© (ÏäπÏù∏ ÌïÑÏöî)

    steps:
      # 1. ÏÜåÏä§ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - name: Checkout code
        uses: actions/checkout@v4 # ÏµúÏã† Ï≤¥ÌÅ¨ÏïÑÏõÉ Ïï°ÏÖò

      # 2. Java Í∞úÎ∞ú ÌôòÍ≤Ω ÏÑ§Ï†ï
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Eclipse Temurin JDK
          java-version: '17' # Java 17

      # 3. Î∞∞Ìè¨ Ï†Ñ Ï¢ÖÌï© ÌÖåÏä§Ìä∏ (ÌîÑÎ°úÎçïÏÖòÏùÄ Îçî ÏóÑÍ≤©)
      - name: Run comprehensive tests
        run: |
          chmod +x gradlew
          ./gradlew clean test --no-daemon
        env:
          JWT_SECRET_KEY: test-jwt-secret-key-for-ci-pipeline-must-be-256-bits # ÌÖåÏä§Ìä∏Ïö© JWT ÌÇ§

      # 4. ÌîÑÎ°úÎçïÏÖòÏö© Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
      - name: Build Docker Image
        run: |
          docker build -t essay-backend:prod-${{ github.sha }} .
          docker tag essay-backend:prod-${{ github.sha }} essay-backend:production-latest

      # 5. Docker Ïù¥ÎØ∏ÏßÄÎ•º ÏïïÏ∂ï ÌååÏùºÎ°ú Ï†ÄÏû•
      - name: Save Docker Image
        run: docker save essay-backend:production-latest | gzip > essay-backend-production.tar.gz

      # 6. ÌïÑÏöîÌïú ÌååÏùºÎì§ÏùÑ ÌîÑÎ°úÎçïÏÖò ÏÑúÎ≤ÑÎ°ú Î≥µÏÇ¨
      - name: Copy files to production server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.PRODUCTION_HOST }} # ÌîÑÎ°úÎçïÏÖò ÏÑúÎ≤Ñ IP
          username: ${{ secrets.PRODUCTION_USER }} # SSH ÏÇ¨Ïö©ÏûêÎ™Ö
          key: ${{ secrets.PRODUCTION_SSH_KEY }} # SSH Í∞úÏù∏ÌÇ§
          # Ï†ÑÏÜ° ÌååÏùº: Docker Ïù¥ÎØ∏ÏßÄ + ÏÑ§Ï†ï ÌååÏùºÎì§
          source: "essay-backend-production.tar.gz,docker-compose.yml,init.sql"
          target: "/tmp/essay-production/" # ÌîÑÎ°úÎçïÏÖò ÏÑúÎ≤Ñ ÏûÑÏãú ÎîîÎ†âÌÜ†Î¶¨

      # 7. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î∞±ÏóÖ ÏÉùÏÑ± (Îç∞Ïù¥ÌÑ∞ Î≥¥Ìò∏)
      - name: Create database backup
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            mkdir -p /backup/essay
            
            if docker ps -q -f name=essay-postgres > /dev/null; then
              echo "üì¶ Creating database backup..."
              BACKUP_FILE="/backup/essay/essay_db_$(date +'%Y%m%d_%H%M%S').sql"
              docker exec essay-postgres pg_dump -U postgres essay_db > "$BACKUP_FILE"
              echo "‚úÖ Backup created: $BACKUP_FILE"
            
              cd /backup/essay
              ls -t essay_db_*.sql | tail -n +11 | xargs -r rm
            else
              echo "‚ÑπÔ∏è  No existing database to backup"
            fi

      # 8. Î¨¥Ï§ëÎã® Î∞∞Ìè¨ Ïã§Ìñâ (Zero-downtime deployment)
      - name: Deploy to production with zero-downtime
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /tmp/essay-production
            
            echo "üîÑ Loading new Docker image..."
            docker load < essay-backend-production.tar.gz
            
            export SPRING_PROFILES_ACTIVE=prod # ÌîÑÎ°úÎçïÏÖò ÌîÑÎ°úÌïÑ
            export DB_PASSWORD="${{ secrets.PRODUCTION_DB_PASSWORD }}"
            export JWT_SECRET_KEY="${{ secrets.PRODUCTION_JWT_SECRET }}"
            
            if ! docker ps -q -f name=essay-postgres > /dev/null; then
              echo "üöÄ Starting PostgreSQL..."
              docker-compose up -d postgres
            
              echo "‚è≥ Waiting for PostgreSQL to be ready..."
              sleep 15
              until docker exec essay-postgres pg_isready -U postgres; do
                echo "Waiting for PostgreSQL..."
                sleep 5
              done
            fi
            
            echo "üîÑ Starting new application container..."
            OLD_CONTAINER=$(docker ps -q -f name=essay-backend)
            
            docker-compose up -d app
            
            sleep 20
            NEW_CONTAINER=$(docker ps -q -f name=essay-backend)
            
            if [ -n "$NEW_CONTAINER" ]; then
              echo "‚úÖ New container started successfully"
            
              if [ -n "$OLD_CONTAINER" ] && [ "$OLD_CONTAINER" != "$NEW_CONTAINER" ]; then
                echo "üõë Stopping old container: $OLD_CONTAINER"
                docker stop "$OLD_CONTAINER" || true
                docker rm "$OLD_CONTAINER" || true
              fi
            else
              echo "‚ùå Failed to start new container"
              exit 1
            fi
            
            # ÏãúÏä§ÌÖú Ï†ïÎ¶¨
            docker system prune -f
            rm -f essay-backend-production.tar.gz

      # 9. Ï¢ÖÌï©Ï†ÅÏù∏ Ìó¨Ïä§Ï≤¥ÌÅ¨ (ÌîÑÎ°úÎçïÏÖòÏö© ÏóÑÍ≤©Ìïú Í≤ÄÏ¶ù)
      - name: Comprehensive Health Check
        run: |
          echo "üè• Starting comprehensive health checks..."
          sleep 30
          
          for i in {1..15}; do
            if curl -f -s ${{ secrets.PRODUCTION_URL }}/api/health > /dev/null; then
              echo "‚úÖ Basic health check passed (attempt $i)"
              break
            fi
          
            if [ $i -eq 15 ]; then
              echo "‚ùå Basic health check failed after 15 attempts"
              exit 1
            fi
          
            echo "‚è≥ Health check attempt $i/15 failed, retrying in 10 seconds..."
            sleep 10
          done
          
          echo "üîç Testing application endpoints..."
          
          if curl -f -s ${{ secrets.PRODUCTION_URL }}/ | grep -q "MyOwnEssay"; then
            echo "‚úÖ Home page accessible"
          else
            echo "‚ùå Home page test failed"
            exit 1
          fi
          
          if curl -f -s ${{ secrets.PRODUCTION_URL }}/api/info | grep -q "MyOwnEssay"; then
            echo "‚úÖ Info endpoint accessible"
          else
            echo "‚ùå Info endpoint test failed"
            exit 1
          fi
          
          echo "üéâ All health checks passed!"

      # 10. Î∞∞Ìè¨ Ïã§Ìå® Ïãú Î°§Î∞± Ï≤òÎ¶¨ (Îç∞Ïù¥ÌÑ∞ Î≥µÏõê Ìè¨Ìï®)
      - name: Rollback on failure
        if: failure() # Ïù¥Ï†Ñ Îã®Í≥Ñ Ï§ë Ïã§Ìå®Ìïú Í≤ΩÏö∞ÏóêÎßå Ïã§Ìñâ
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            echo "üö® PRODUCTION DEPLOYMENT FAILED - Initiating rollback"
            cd /tmp/essay-production
            
            echo "üìã Current application logs:"
            docker-compose logs app --tail=100
            
            LATEST_BACKUP=$(ls -t /backup/essay/essay_db_*.sql 2>/dev/null | head -n 1)
            
            if [ -n "$LATEST_BACKUP" ]; then
              echo "üîÑ Restoring database from backup: $LATEST_BACKUP"
              docker exec essay-postgres dropdb -U postgres essay_db --if-exists
              docker exec essay-postgres createdb -U postgres essay_db
              docker exec -i essay-postgres psql -U postgres essay_db < "$LATEST_BACKUP"
            fi
            
            echo "‚ùå Rollback completed. Manual intervention required."

      # 11. Î∞∞Ìè¨ Í≤∞Í≥º ÏµúÏ¢Ö ÏïåÎ¶º
      - name: Notify deployment result
        if: always() # ÏÑ±Í≥µ/Ïã§Ìå® Í¥ÄÍ≥ÑÏóÜÏù¥ Ìï≠ÏÉÅ Ïã§Ìñâ
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ PRODUCTION deployment successful!"
            echo "üìç Version: ${{ github.sha }}"
            echo "üåê URL: ${{ secrets.PRODUCTION_URL }}"
          else
            echo "üí• PRODUCTION deployment FAILED!"
            echo "‚ö†Ô∏è  Manual intervention required"
            echo "üìç Failed version: ${{ github.sha }}"
          fi