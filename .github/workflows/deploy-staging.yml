name: Deploy to Staging

# 스테이징 배포 실행 조건
on:
  push: # 코드 푸시 시
    branches: [develop] # develop 브랜치만
  workflow_dispatch: # 수동 실행도 가능

jobs:
  deploy-staging:
    runs-on: ubuntu-latest # 최신 Ubuntu 환경
    environment: staging # GitHub Environment 'staging' 사용 (승인/보안 설정 가능)

    steps:
      # 1. 소스코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4 # 최신 체크아웃 액션

      # 2. Java 개발 환경 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Eclipse Temurin JDK
          java-version: '17' # Java 17

      # 3. 배포 전 테스트 실행 (안전성 확보)
      - name: Run tests before deployment
        run: |
          chmod +x gradlew
          ./gradlew test --no-daemon
        env:
          JWT_SECRET_KEY: test-jwt-secret-key-for-ci-pipeline-must-be-256-bits # 테스트용 JWT 키

      # 4. Docker 이미지 빌드
      - name: Build Docker Image
        run: |
          docker build -t essay-backend:staging-${{ github.sha }} .
          docker tag essay-backend:staging-${{ github.sha }} essay-backend:staging-latest

      # 5. Docker 이미지를 파일로 저장 (서버 전송용)
      - name: Save Docker Image
        run: docker save essay-backend:staging-latest | gzip > essay-backend-staging.tar.gz

      # 6. 필요한 파일들을 스테이징 서버로 복사
      - name: Copy files to staging server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: 22
          source: essay-backend-staging.tar.gz,docker-compose.yml,init.sql
          target: /tmp/essay-staging/

      # 7. 스테이징 서버에 배포 실행 (수정됨)
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /tmp/essay-staging
            
            # Docker 그룹에 사용자 추가 (권한 문제 해결)
            sudo usermod -aG docker $USER
            newgrp docker || true
            
            # Docker 서비스 시작 확인
            sudo systemctl start docker
            sudo systemctl enable docker
            
            # Docker 소켓 권한 설정
            sudo chmod 666 /var/run/docker.sock
            
            # 이미지 로드
            docker load < essay-backend-staging.tar.gz
            
            # 환경변수 설정
            export SPRING_PROFILES_ACTIVE=dev
            export DB_PASSWORD="${{ secrets.STAGING_DB_PASSWORD }}"
            export JWT_SECRET_KEY="${{ secrets.STAGING_JWT_SECRET }}"
            
            # 기존 컨테이너 정리
            docker-compose down --remove-orphans || true
            
            # PostgreSQL 먼저 시작
            docker-compose up -d postgres
            
            # PostgreSQL 준비 대기
            sleep 15
            
            # PostgreSQL 연결 확인 (sudo 없이 시도)
            for i in {1..10}; do
              if docker ps | grep -q postgres && docker exec essay-postgres pg_isready -U postgres; then
                echo "PostgreSQL is ready"
                break
              fi
              echo "Waiting for PostgreSQL... (attempt $i/10)"
              sleep 5
            done
            
            # 애플리케이션 컨테이너 시작
            docker-compose up -d app
            
            # 시스템 정리
            docker system prune -f || true
            rm -f essay-backend-staging.tar.gz

      # 8. 배포 후 헬스체크 (재시도 로직 포함)
      - name: Health Check with retry
        run: |
          echo "Waiting for application to start..."
          sleep 30
          
          for i in {1..10}; do
            if curl -f -s ${{ secrets.STAGING_URL }}/api/health; then
              echo "✅ Health check passed"
              exit 0
            fi
            echo "⏳ Attempt $i/10 failed, retrying in 10 seconds..."
            sleep 10
          done
          
          echo "❌ Health check failed after 10 attempts"
          exit 1

      # 9. 배포 실패 시 롤백 처리
      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            echo "🔄 Rolling back due to deployment failure..."
            cd /tmp/essay-staging
            docker-compose logs app --tail=50 || true
            docker-compose down || true

      # 10. 배포 결과 알림
      - name: Notify deployment result
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 Staging deployment successful: ${{ github.sha }}"
          else
            echo "💥 Staging deployment failed: ${{ github.sha }}"
          fi