name: CI Pipeline

# 워크플로우 실행 조건 정의
on:
  pull_request: # PR 생성/수정 시 실행
    branches: [main, develop] # main, develop 브랜치에 대한 PR만
  push: # 코드 푸시 시 실행
    branches: [develop] # develop 브랜치 푸시만

# GitHub Actions 권한 설정 추가
permissions:
  contents: read
  checks: write    # 테스트 결과 업로드 권한
  pull-requests: write  # PR에 댓글 작성 권한

jobs:
  test: # 테스트 작업 정의
    runs-on: ubuntu-latest # 최신 Ubuntu 환경에서 실행

    # PostgreSQL 데이터베이스 서비스 컨테이너 설정
    services:
      postgres:
        image: postgres:17 # PostgreSQL 17 버전 사용
        env: # 환경변수 설정
          POSTGRES_DB: essay_db # 데이터베이스 이름
          POSTGRES_USER: postgres # 사용자명
          POSTGRES_PASSWORD: testpassword # 테스트용 비밀번호
        ports:
          - 5432:5432 # 포트 매핑 (호스트:컨테이너)
        options: >- # 헬스체크 옵션
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps: # 실행 단계들
      # 1. 소스코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4 # GitHub Actions의 체크아웃 액션 사용

      # 2. Java 개발 환경 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4 # Java 설정 액션
        with:
          distribution: 'temurin' # Eclipse Temurin JDK 사용
          java-version: '17' # Java 17 버전

      # 3. Gradle 캐시 설정 (빌드 속도 향상)
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: | # 캐시할 경로들
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          # OS와 Gradle 파일들의 해시값으로 캐시 키 생성
          restore-keys: | # 캐시 복원 키 (부분 일치용)
            ${{ runner.os }}-gradle-

      # 4. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew # gradlew 스크립트에 실행 권한 부여

      # 5. PostgreSQL 준비 상태 대기
      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      # 6. 테스트 실행
      - name: Run tests
        run: ./gradlew test --no-daemon # Gradle 테스트 실행 (데몬 모드 비활성화)
        env: # 테스트용 환경변수
          SPRING_PROFILES_ACTIVE: test # Spring 테스트 프로필 활성화
          DB_HOST: localhost # 데이터베이스 호스트
          DB_NAME: essay_db # 데이터베이스 이름
          DB_USERNAME: postgres # 데이터베이스 사용자명
          DB_PASSWORD: testpassword # 데이터베이스 비밀번호
          JWT_SECRET_KEY: test-jwt-secret-key-for-ci-pipeline-must-be-256-bits # JWT 테스트 키

      # 7. 애플리케이션 빌드 (테스트 제외)
      - name: Build application
        run: ./gradlew build -x test --no-daemon # 빌드 실행 (-x test로 테스트 제외)

      # 8. 테스트 결과 업로드 (수정됨)
      - name: Upload test results
        uses: dorny/test-reporter@v1 # 테스트 결과 리포터
        if: always() # 성공/실패 관계없이 항상 실행
        with:
          name: Test Results # 리포트 이름
          path: build/test-results/test/*.xml # JUnit XML 결과 파일 경로
          reporter: java-junit # JUnit 리포터 사용
          fail-on-error: false  # 테스트 실패해도 워크플로우는 계속
          token: ${{ secrets.GITHUB_TOKEN }}  # GitHub 토큰 명시적 설정