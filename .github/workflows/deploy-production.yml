name: Deploy to Production (Cloud Run)

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: asia-northeast3
  SERVICE_NAME: essay-backend

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run tests before deployment
        run: |
          chmod +x gradlew
          ./gradlew test --no-daemon
        env:
          JWT_SECRET_KEY: test-jwt-secret-key-for-ci-pipeline-must-be-256-bits

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build Docker Image
        run: |
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          docker tag gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
                     gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

      - name: Push Docker Image to GCR
        run: |
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          env_vars: |
            SPRING_PROFILES_ACTIVE=prod
            DB_HOST=34.64.150.171
            DB_NAME=myownessay-db
            DB_USERNAME=postgres
          secrets: |
            DB_PASSWORD=PRODUCTION_DB_PASSWORD:latest
            JWT_SECRET_KEY=PRODUCTION_JWT_SECRET:latest
          flags: |
            --port=8080
            --memory=512Mi
            --cpu=1
            --timeout=300
            --max-instances=10
            --min-instances=0
            --allow-unauthenticated
            --cpu-boost

      - name: Health Check
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format 'value(status.url)')
          
          echo "Service URL: $SERVICE_URL"
          
          echo "Waiting for service to be ready..."
          for i in {1..30}; do
            if curl -f -s "$SERVICE_URL/api/health" > /dev/null; then
              echo "Health check passed!"
              curl -s "$SERVICE_URL/api/health"
              exit 0
            fi
            echo "Attempt $i/30 - waiting 5 seconds..."
            sleep 5
          done
          
          echo "Health check failed after 30 attempts"
          exit 1

      - name: Deployment Summary
        if: success()
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format 'value(status.url)')
          
          echo "===== PRODUCTION DEPLOYMENT SUCCESSFUL ====="
          echo "Version: ${{ github.sha }}"
          echo "Service URL: $SERVICE_URL"
          echo "Custom Domain: https://myownessay.p-e.kr"
          echo "Region: ${{ env.REGION }}"
          echo "Image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"

      - name: Debug on failure
        if: failure()
        run: |
          echo "=== DEBUGGING FAILED DEPLOYMENT ==="
          gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} || echo "Service not found"
          
          gcloud logging read "resource.type=cloud_run_revision AND \
            resource.labels.service_name=${{ env.SERVICE_NAME }}" \
            --limit 50 \
            --format json || echo "No logs available"