name: Deploy to Staging

# 스테이징 배포 실행 조건
on:
  push: # 코드 푸시 시
    branches: [develop] # develop 브랜치만
  workflow_dispatch: # 수동 실행도 가능

jobs:
  deploy-staging:
    runs-on: ubuntu-latest # 최신 Ubuntu 환경
    environment: staging # GitHub Environment 'staging' 사용 (승인/보안 설정 가능)

    steps:
      # 1. 소스코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4 # 최신 체크아웃 액션

      # 2. Java 개발 환경 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Eclipse Temurin JDK
          java-version: '17' # Java 17

      # 3. 배포 전 테스트 실행 (안전성 확보)
      - name: Run tests before deployment
        run: |
          chmod +x gradlew
          ./gradlew test --no-daemon
        env:
          JWT_SECRET_KEY: test-jwt-secret-key-for-ci-pipeline-must-be-256-bits # 테스트용 JWT 키

      # 4. Docker 이미지 빌드
      - name: Build Docker Image
        run: |
          docker build -t essay-backend:staging-${{ github.sha }} .
          docker tag essay-backend:staging-${{ github.sha }} essay-backend:staging-latest

      # 5. Docker 이미지를 파일로 저장 (서버 전송용)
      - name: Save Docker Image
        run: docker save essay-backend:staging-latest | gzip > essay-backend-staging.tar.gz

      # 6. 서버 디렉토리 정리
      - name: Clean staging directory
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            # 기존 디렉토리 완전 삭제
            sudo rm -rf /tmp/essay-staging
            # 새로운 디렉토리 생성
            mkdir -p /tmp/essay-staging
            # 권한 설정
            sudo chown -R $USER:$USER /tmp/essay-staging

      # 7. 필요한 파일들을 스테이징 서버로 복사
      - name: Copy files to staging server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: 22
          source: essay-backend-staging.tar.gz,docker-compose.yml,init.sql
          target: /tmp/essay-staging/
          overwrite: true
          rm: false

      # 8. 스테이징 서버에 배포 실행
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /tmp/essay-staging
            
            # Docker 권한 설정
            sudo usermod -aG docker $USER || true
            sudo systemctl start docker || true
            sudo systemctl enable docker || true
            sudo chmod 666 /var/run/docker.sock || true
            
            # 이미지 로드
            echo "Loading Docker image..."
            docker load < essay-backend-staging.tar.gz
            
            # 환경변수 설정
            export SPRING_PROFILES_ACTIVE=dev
            export DB_PASSWORD="${{ secrets.STAGING_DB_PASSWORD }}"
            export JWT_SECRET_KEY="${{ secrets.STAGING_JWT_SECRET }}"
            
            # 기존 컨테이너 정리
            echo "Stopping existing containers..."
            docker-compose down --remove-orphans || true
            
            # 애플리케이션 컨테이너 시작
            echo "Starting application container..."
            docker-compose up -d app
            
            # 컨테이너 상태 확인 (중요: 진단용)
            echo "=== Docker Container Status ==="
            docker ps -a
            
            echo "=== Application Logs (last 50 lines) ==="
            docker logs essay-backend --tail=50 || echo "No logs available yet"
            
            # 네트워크 확인
            echo "=== Network Status ==="
            docker network ls
            
            # 포트 확인
            echo "=== Port Status ==="
            netstat -tlnp | grep :8080 || echo "Port 8080 not listening"
            
            # 시스템 정리
            docker system prune -f || true

      # 9. 진단용 추가 정보 수집
      - name: Collect diagnostic information
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            echo "=== System Information ==="
            free -h  # 메모리 상태
            df -h    # 디스크 상태
            
            echo "=== Docker Service Status ==="
            sudo systemctl status docker --no-pager
            
            echo "=== Application Container Detailed Logs ==="
            docker logs essay-backend || echo "Container not found or no logs"
            
            echo "=== Container Inspection ==="
            docker inspect essay-backend || echo "Container not found"

      # 10. 배포 후 헬스체크 (더 상세한 진단 포함)
      - name: Health Check with detailed diagnosis
        run: |
          echo "Waiting for application to start..."
          sleep 30
          
          for i in {1..10}; do
            echo "=== Health Check Attempt $i/10 ==="
          
            # 기본 연결 테스트
            if curl -v ${{ secrets.STAGING_URL }}/api/health 2>&1; then
              echo "Health check passed!"
              exit 0
            else
              echo "Health check failed. Checking server status..."
          
              # 서버가 응답하는지 확인
              if curl -v ${{ secrets.STAGING_URL }} 2>&1; then
                echo "Server is responding but /api/health is not available"
              else
                echo "Server is not responding at all"
              fi
            fi
          
            if [ $i -lt 10 ]; then
              echo "Retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          echo "Health check failed after 10 attempts"
          echo "Check the diagnostic information above for details"
          exit 1

      # 11. 배포 실패 시 롤백 처리
      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            echo "Rolling back due to deployment failure..."
            cd /tmp/essay-staging
            
            echo "=== Final Application Logs ==="
            docker logs essay-backend --tail=100 || true
            
            echo "=== Container Status ==="
            docker ps -a
            
            echo "=== System Resources ==="
            free -h
            df -h
            
            # 컨테이너 중지 (롤백)
            docker-compose down || true

      # 12. 배포 결과 알림
      - name: Notify deployment result
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Staging deployment successful: ${{ github.sha }}"
          else
            echo "Staging deployment failed: ${{ github.sha }}"
            echo "Check the diagnostic logs above for troubleshooting"
          fi