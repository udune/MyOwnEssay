name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run tests before deployment
        run: |
          chmod +x gradlew
          ./gradlew test --no-daemon
        env:
          JWT_SECRET_KEY: test-jwt-secret-key-for-ci-pipeline-must-be-256-bits

      - name: Build Docker Image
        run: |
          docker build -t essay-backend:staging-${{ github.sha }} .
          docker tag essay-backend:staging-${{ github.sha }} essay-backend:staging-latest

      - name: Save Docker Image
        run: docker save essay-backend:staging-latest | gzip > essay-backend-staging.tar.gz

      - name: Create deployment script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "=== Starting Staging Deployment ==="
          
          # 기존 컨테이너 정리
          docker stop essay-backend || true
          docker rm essay-backend || true
          
          # Docker 이미지 로드
          echo "Loading Docker image..."
          docker load < essay-backend-staging.tar.gz
          
          # 환경변수 검증
          if [ -z "$DB_PASSWORD" ] || [ -z "$JWT_SECRET_KEY" ]; then
            echo "ERROR: Required environment variables not set!"
            exit 1
          fi
          
          echo "Environment check passed"
          echo "DB_PASSWORD length: ${#DB_PASSWORD}"
          echo "JWT_SECRET_KEY length: ${#JWT_SECRET_KEY}"
          
          # 컨테이너 실행
          echo "Starting new container..."
          docker run -d \
            --name essay-backend \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=dev \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://34.64.150.171:5432/myownessay-db \
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD="$DB_PASSWORD" \
            -e JWT_SECRET="$JWT_SECRET_KEY" \
            -e JWT_EXPIRATION=86400000 \
            -e JWT_REFRESH_EXPIRATION=604800000 \
            --restart unless-stopped \
            essay-backend:staging-latest
          
          # 컨테이너 시작 대기
          sleep 15
          
          # 컨테이너 상태 확인
          if docker ps | grep -q essay-backend; then
            echo "✅ Container started successfully!"
            docker logs essay-backend --tail=20
          else
            echo "❌ Container failed to start!"
            docker ps -a
            docker logs essay-backend || true
            exit 1
          fi
          
          echo "=== Staging Deployment Complete ==="
          EOF
          
          chmod +x deploy.sh

      - name: Clean staging directory
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            sudo rm -rf /tmp/essay-staging
            mkdir -p /tmp/essay-staging
            sudo chown -R $USER:$USER /tmp/essay-staging

      - name: Copy files to staging server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: 22
          source: essay-backend-staging.tar.gz,deploy.sh
          target: /tmp/essay-staging/
          overwrite: true

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /tmp/essay-staging
            
            # Docker 권한 설정
            sudo usermod -aG docker $USER || true
            sudo systemctl start docker || true
            sudo chmod 666 /var/run/docker.sock || true
            
            # 환경변수 설정
            export DB_PASSWORD="${{ secrets.STAGING_DB_PASSWORD }}"
            export JWT_SECRET_KEY="${{ secrets.STAGING_JWT_SECRET }}"
            
            # 배포 스크립트 실행
            ./deploy.sh

      # SSH를 통한 안전한 헬스체크 (외부 접근 대신)
      - name: SSH Health Check
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            echo "🏥 Starting SSH Health Check..."
            
            # 컨테이너 상태 확인
            if ! docker ps | grep -q essay-backend; then
              echo "❌ Container not running"
              exit 1
            fi
            echo "✅ Container is running"
            
            # 포트 리스닝 확인
            if ! ss -tlnp | grep -q :8080; then
              echo "❌ Port 8080 not listening"
              exit 1
            fi
            echo "✅ Port 8080 is listening"
            
            # 애플리케이션 응답 대기
            echo "⏳ Waiting for application to be ready..."
            for i in {1..15}; do
              if curl -f -s http://localhost:8080/api/health > /dev/null; then
                echo "✅ Application health check passed!"
            
                # 상세 응답 확인
                echo "📊 Health response:"
                curl -s http://localhost:8080/api/health
            
                echo "🎉 Staging deployment successful!"
                exit 0
              fi
            
              if [ $i -lt 15 ]; then
                echo "Attempt $i/15 - waiting 5 seconds..."
                sleep 5
              fi
            done
            
            echo "❌ Health check failed after 15 attempts"
            echo "📋 Recent logs:"
            docker logs essay-backend --tail=30
            exit 1

      - name: Deployment Summary
        if: success()
        run: |
          echo "🎉 ===== STAGING DEPLOYMENT SUCCESSFUL ===== 🎉"
          echo "📍 Version: ${{ github.sha }}"
          echo "🌐 Server: ${{ secrets.STAGING_HOST }}:8080"
          echo "✅ Application: Running and healthy"
          echo "💾 Database: Connected to PostgreSQL"
          echo "🔐 Security: JWT authentication enabled"

      - name: Debug on failure
        if: failure()
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            echo "=== DEBUGGING FAILED DEPLOYMENT ==="
            echo "Container status:"
            docker ps -a | grep essay || echo "No essay containers"
            echo "Application logs:"
            docker logs essay-backend --tail=50 || echo "No logs available"
            echo "Port status:"
            ss -tlnp | grep :8080 || echo "Port 8080 not listening"

      - name: Cleanup
        if: always()
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /tmp/essay-staging
            rm -f essay-backend-staging.tar.gz deploy.sh
            docker system prune -f